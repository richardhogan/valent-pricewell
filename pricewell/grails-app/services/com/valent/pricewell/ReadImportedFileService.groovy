package com.valent.pricewell

import javax.xml.parsers.DocumentBuilder
import javax.xml.parsers.DocumentBuilderFactory
import org.w3c.dom.Document
import org.w3c.dom.NamedNodeMap
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.xml.sax.SAXException
import org.xml.sax.SAXParseException
import java.io.File;
import java.text.SimpleDateFormat
import org.springframework.web.multipart.MultipartFile;

class ReadImportedFileService {

    static transactional = true

	static def fileUploadService
    def serviceMethod() {

    }
	
	public String replaceSpecialCharacter(String str)
	{
		str = str.replaceAll("&(?![A-Za-z]+;|#[0-9]+;)", "&amp;")
		return str
	}
	
	public String readFileToCheckSpecialCharacter(MultipartFile mfile, String storagePath)
	{
		def dateFormat = "-'date('yyyy-MM-dd')-time('HH.mm.ss')'"
		String dateString = System.currentTimeMillis().toString()
		String randomUserId = UUID.randomUUID().toString()
		String line = null;
		
		def sourceFileName = storagePath+"/tempService"+dateString+randomUserId+".xml"
		def destinationFileName = storagePath+"/service"+dateString+randomUserId+".xml"
		
		File temp = new File(sourceFileName)
		mfile.transferTo(temp)
		
		FileReader fileReader =	new FileReader(sourceFileName);
		FileWriter fileWriter =	new FileWriter(new File(destinationFileName))
		
				// Always wrap FileReader in BufferedReader.
		BufferedReader bufferedReader =	new BufferedReader(fileReader);
		BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
		
		try 
		{	
			while((line = bufferedReader.readLine()) != null) {
				bufferedWriter.write(replaceSpecialCharacter(line));
				bufferedWriter.newLine();
			}
		
					// Always close files
		}
		catch(FileNotFoundException ex) {
			System.out.println("Unable to open file '" + temp.getName() + "'");
		}
		catch(IOException ex) {
			System.out.println("Error reading file '" + temp.getName() + "'");
		}
		finally
		{
			bufferedReader.close();
			bufferedWriter.close();
		}
		
		new File(sourceFileName).delete()
		//readFileAgain(destinationFileName)
				
		return destinationFileName.toString()
	}
	
	public void readFileAgain(String destinationFileName)
	{
		String line = null;
		
		try{
			FileReader fileReader =	new FileReader(destinationFileName);
					// Always wrap FileReader in BufferedReader.
			BufferedReader bufferedReader =	new BufferedReader(fileReader);
			
			while((line = bufferedReader.readLine()) != null) {
				System.out.println( replaceSpecialCharacter(line))
				//println
			}
		
					// Always close files.
			bufferedReader.close();
		}
		catch(FileNotFoundException ex) {
			System.out.println("Unable to open file '" + destinationFileName + "'");
		}
		catch(IOException ex) {
			System.out.println("Error reading file '" + destinationFileName + "'");
		}
	}
	
	public static List readServiceFile(File fXmlFile) throws SAXException, SAXParseException, ArrayIndexOutOfBoundsException
	{
		List services = new ArrayList()
		try 
		{
			Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(fXmlFile);
			
			doc.getDocumentElement().normalize();
		 
			System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
		 
			NodeList serviceList = doc.getElementsByTagName("service")
			
			for (int temp = 0; temp < serviceList.getLength(); temp++)
			{
				Node service = serviceList.item(temp)
				if (service.getNodeType() == Node.ELEMENT_NODE)
			    {
					NodeList serviceProperties = service.getChildNodes()
					
					services.add(getServiceMap(serviceProperties))
			    }
			}
		}
		catch (SAXParseException err) {
			System.out.println ("** Parsing error"
				+ ", line " + err.getLineNumber ()
				+ ", column " + err.getColumnNumber()
				+ ", uri " + err.getSystemId ());
			
			System.out.println("   " + err.getMessage ());
		
		}
		catch (SAXException sxe) {
			// Error generated by this application
			// (or a parser-initialization error)
			Exception  x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			x.getMessage()
			
		
		}catch (Exception e) {
			System.out.println(e.getMessage());
		}
		
		return services
		
	}
	
	public static Map getServiceMap(NodeList serviceProperties)
	{
		Map service = new HashMap()
		
		for(int k=0; k < serviceProperties.getLength(); k++)
		{
			Node serviceProp = serviceProperties.item(k)
			
			if(serviceProp.getNodeType() == Node.ELEMENT_NODE)
			{
				if(serviceProp.getNodeName() == "portfolio")
				{
					NodeList portfolioProperties = serviceProp.getChildNodes()
					service['portfolio'] = getPortfolioMap(portfolioProperties)
				}
				else if(serviceProp.getNodeName() == "serviceProfile")
				{
					NodeList serviceProfileProperties = serviceProp.getChildNodes()
					service['serviceProfile'] = getServiceProfileMap(serviceProfileProperties)
				}
				else
				{
					String checkedAttr = getServiceAttributes(serviceProp.getNodeName().toString())
					if(checkedAttr != "")
					{
						service[checkedAttr] = serviceProp.getTextContent()
					}
				}
			}
		}
	
		return service
	}
	
	public static Map getPortfolioMap(NodeList portfolioProperties)
	{
		Map portfolio = new HashMap()
		
		for(int k=0; k < portfolioProperties.getLength(); k++)
		{
			Node prop = portfolioProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				String checkedAttr = getPortfolioAttributes(prop.getNodeName().toString())
				if(checkedAttr != "")
				{
					portfolio[checkedAttr] = prop.getTextContent()
				}
			}
		}
	
		return portfolio
	}
	
	public static Map getServiceProfileMap(NodeList serviceProfileProperties)
	{
		Map serviceProfile = new HashMap()
		
		for(int k=0; k < serviceProfileProperties.getLength(); k++)
		{
			Node prop = serviceProfileProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				if(prop.getNodeName() == "productsRequired")
				{
					serviceProfile['productsRequired'] = getProductRequired(prop)
				}
				else if(prop.getNodeName() == "customerDeliverables")
				{
					serviceProfile['customerDeliverables'] = getCustomerDeliverables(prop)
				}
				else if(prop.getNodeName() == "defs")
				{
					serviceProfile['defs'] = getServiceProfileSOWDefinitions(prop)
				}
				else if(prop.getNodeName() == "metaphors")
				{
					serviceProfile['metaphors'] = getServiceProfileMetaphors(prop)
				}
				else if(prop.getNodeName() == "extraUnits")
				{
					serviceProfile['extraUnits'] = getServiceProfileExtraUnits(prop)
				}
				else
				{
					String checkedAttr = getServiceProfileAttributes(prop.getNodeName().toString())
					if(checkedAttr != "")
					{
						serviceProfile[checkedAttr] = prop.getTextContent()
					}
				}
				
			}
		}
	
		return serviceProfile
	}
	
	public static List getServiceProfileSOWDefinitions(Node defsNode)
	{
		List defs = new ArrayList()
		NodeList sowDefinitionList = defsNode.getChildNodes()
		
		for(int temp = 0; temp < sowDefinitionList.getLength(); temp++)
		{
			Node sowDef = sowDefinitionList.item(temp)
			if(sowDef.getNodeType() == Node.ELEMENT_NODE)
			{
				NodeList sowDefinitionProperties = sowDef.getChildNodes()
				
				defs.add(getServiceProfileSOWDefMap(sowDefinitionProperties))
			}
		}
		
		return defs
	}
	
	public static Map getServiceProfileSOWDefMap(NodeList sowDefinitionProperties)
	{
		Map sowDef = new HashMap()
		for(int k=0; k < sowDefinitionProperties.getLength(); k++)
		{
			Node prop = sowDefinitionProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				String checkedAttr = getSOWDefinitionAttributes(prop.getNodeName().toString())
				if(checkedAttr != "")
				{
					sowDef[checkedAttr] = prop.getTextContent()
				}
			}
		}
		return sowDef
	}
	
	public static List getServiceProfileExtraUnits(Node extraUnitsNode)
	{
		List metaphors = new ArrayList()
		NodeList serviceProfileExtraUnitsList = extraUnitsNode.getChildNodes()
		
		for(int temp = 0; temp < serviceProfileExtraUnitsList.getLength(); temp++)
		{
			Node extraUnits = serviceProfileExtraUnitsList.item(temp)
			if(extraUnits.getNodeType() == Node.ELEMENT_NODE)
			{
				NodeList extraUnitProperties = extraUnits.getChildNodes()
				
				metaphors.add(getServiceProfileExtraUnitsMap(extraUnitProperties))
			}
		}
		
		return metaphors
	}
	
	public static Map getServiceProfileExtraUnitsMap(NodeList extraUnitProperties)
	{
		Map extraUnitMap = new HashMap()
		for(int k=0; k < extraUnitProperties.getLength(); k++)
		{
			Node prop = extraUnitProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				String checkedAttr = getServiceProfileExtraUnitAttributes(prop.getNodeName().toString())
				if(checkedAttr != "")
				{
					extraUnitMap[checkedAttr] = prop.getTextContent()
				}
			}
		}
		return extraUnitMap
	}
	
	public static List getServiceProfileMetaphors(Node metaphorNode)
	{
		List metaphors = new ArrayList()
		NodeList serviceProfileMetaphorsList = metaphorNode.getChildNodes()
		
		for(int temp = 0; temp < serviceProfileMetaphorsList.getLength(); temp++)
		{
			Node metaphor = serviceProfileMetaphorsList.item(temp)
			if(metaphor.getNodeType() == Node.ELEMENT_NODE)
			{
				NodeList sowDefinitionProperties = metaphor.getChildNodes()
				
				metaphors.add(getServiceProfileMetaphorsMap(sowDefinitionProperties))
			}
		}
		
		return metaphors
	}
	
	public static Map getServiceProfileMetaphorsMap(NodeList metaphorProperties)
	{
		Map mataphorMap = new HashMap()
		for(int k=0; k < metaphorProperties.getLength(); k++)
		{
			Node prop = metaphorProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				String checkedAttr = getServiceProfileMetaphorsAttributes(prop.getNodeName().toString())
				if(checkedAttr != "")
				{
					mataphorMap[checkedAttr] = prop.getTextContent()
				}
			}
		}
		return mataphorMap
	}
	
	public static List getCustomerDeliverables(Node customerDeliverablesNode)
	{
		List customerDeliverables = new ArrayList()
		NodeList deliverableList = customerDeliverablesNode.getChildNodes()
		
		for (int temp = 0; temp < deliverableList.getLength(); temp++)
		{
			Node serviceDeliverable = deliverableList.item(temp)
			if (serviceDeliverable.getNodeType() == Node.ELEMENT_NODE)
			{
				NodeList serviceDeliverableProperties = serviceDeliverable.getChildNodes()
				
				customerDeliverables.add(getServiceDeliverableMap(serviceDeliverableProperties))
			}
		}
		
		return customerDeliverables
	}

	public static Map getServiceDeliverableMap(NodeList serviceDeliverableProperties)
	{
		def serviceDeliverable = [:]
		
		for(int k=0; k < serviceDeliverableProperties.getLength(); k++)
		{
			Node prop = serviceDeliverableProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				if(prop.getNodeName() == "serviceActivities")
				{
					serviceDeliverable['serviceActivities'] = getServiceActivities(prop)
				}
				else if(prop.getNodeName() == "newDescription")
				{
					serviceDeliverable['newDescription'] = getServiceDeliverableDescription(prop)
				}
				else
				{
					String checkedAttr = getServiceDeliverableAttributes(prop.getNodeName().toString())
					if(checkedAttr != "")
					{
						serviceDeliverable[checkedAttr] = prop.getTextContent()
					}
				}
				
			}
		}
	
		return serviceDeliverable
	}
	
	public static Map getServiceDeliverableDescription(Node descriptionNode)
	{
		NodeList descriptionNodeElements = descriptionNode.getChildNodes()
		Map descriptionMap = new HashMap()
		for(int temp=0; temp < descriptionNodeElements.getLength(); temp++)
		{
			Node descriptionElement = descriptionNodeElements.item(temp)
			if(descriptionElement.getNodeType() == Node.ELEMENT_NODE)
			{
				String checkedAttr = getDescriptionAttributes(descriptionElement.getNodeName().toString())
				if(checkedAttr != "")
				{
					descriptionMap[checkedAttr] = descriptionElement.getTextContent()
				}
			}
		}
		return descriptionMap
	}
	
	public static List getServiceActivities(Node serviceActivitiesNode)
	{
		def servicesActivities = []
		NodeList activityList = serviceActivitiesNode.getChildNodes()
		
		for (int temp = 0; temp < activityList.getLength(); temp++)
		{
			Node serviceActivity = activityList.item(temp)
			if (serviceActivity.getNodeType() == Node.ELEMENT_NODE)
			{
				NodeList serviceActivityProperties = serviceActivity.getChildNodes()
				
				servicesActivities.add(getServiceActivityMap(serviceActivityProperties))
			}
		}
		
		return servicesActivities
	}
	
	public static Map getServiceActivityMap(NodeList serviceActivityProperties)
	{
		def serviceActivity = [:]
		
		for(int k=0; k < serviceActivityProperties.getLength(); k++)
		{
			Node prop = serviceActivityProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				if(prop.getNodeName() == "rolesRequired")
				{
					serviceActivity['rolesRequired'] = getRolesRequired(prop)
				}
				else if(prop.getNodeName() == "rolesEstimatedTime")
				{
					serviceActivity['rolesEstimatedTime'] = getRolesEstimatedTime(prop)
				}
				else if(prop.getNodeName() == "activityTasks")
				{
					serviceActivity['activityTasks'] = getServiceActivityTasks(prop)
				}
				else
				{
					String checkedAttr = getServiceActivityAttributes(prop.getNodeName().toString())
					if(checkedAttr != "")
					{
						serviceActivity[checkedAttr] = prop.getTextContent()
					}
				}
				
			}
		}
	
		return serviceActivity
	}
	
	public static List getServiceActivityTasks(Node serviceActivityTaskNode)
	{
		def serviceActivityTasks = []
		NodeList serviceActivityTaskList = serviceActivityTaskNode.getChildNodes()
		
		for (int temp = 0; temp < serviceActivityTaskList.getLength(); temp++)
		{
			Node saTask = serviceActivityTaskList.item(temp)
			if (saTask.getNodeType() == Node.ELEMENT_NODE)
			{
				NodeList serviceActivityTaskProperties = saTask.getChildNodes()
				
				serviceActivityTasks.add(getServiceActivityTaskMap(serviceActivityTaskProperties))
			}
		}
		
		return serviceActivityTasks
	}
	
	public static Map getServiceActivityTaskMap(NodeList serviceActivityTaskProperties)
	{
		def serviceActivityTask = [:]
		
		for(int k=0; k < serviceActivityTaskProperties.getLength(); k++)
		{
			Node prop = serviceActivityTaskProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				String checkedAttr = getServiceActivityTaskAttributes(prop.getNodeName().toString())
				if(checkedAttr != "")
				{
					serviceActivityTask[checkedAttr] = prop.getTextContent()
				}
			}
		}
	
		return serviceActivityTask
	}
	
	public static List getRolesRequired(Node rolesRequiredNode)
	{
		def rolesRequired = []
		NodeList deliveryRoleList = rolesRequiredNode.getChildNodes()
		
		for (int temp = 0; temp < deliveryRoleList.getLength(); temp++)
		{
			Node deliveryRole = deliveryRoleList.item(temp)
			if (deliveryRole.getNodeType() == Node.ELEMENT_NODE)
			{
				NodeList deliveryRoleProperties = deliveryRole.getChildNodes()
				
				rolesRequired.add(getDeliveryRoleMap(deliveryRoleProperties))
			}
		}
		
		return rolesRequired
	}
	
	public static Map getDeliveryRoleMap(NodeList deliveryRoleProperties)
	{
		def deliveryRole = [:]
		
		for(int k=0; k < deliveryRoleProperties.getLength(); k++)
		{
			Node prop = deliveryRoleProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				String checkedAttr = getDeliveryRoleAttributes(prop.getNodeName().toString())
				if(checkedAttr != "")
				{
					deliveryRole[checkedAttr] = prop.getTextContent()
				}
			}
		}
	
		return deliveryRole
	}
	
	public static List getRolesEstimatedTime(Node roleEstimatedTimeNode)
	{
		def roleEstimatedTime = []
		NodeList activityRoleTimeList = roleEstimatedTimeNode.getChildNodes()
		
		for (int temp = 0; temp < activityRoleTimeList.getLength(); temp++)
		{
			Node activityRoleTime = activityRoleTimeList.item(temp)
			if (activityRoleTime.getNodeType() == Node.ELEMENT_NODE)
			{
				NodeList activityRoleTimeProperties = activityRoleTime.getChildNodes()
				
				roleEstimatedTime.add(getActivityRoleTimeMap(activityRoleTimeProperties))
			}
		}
		
		return roleEstimatedTime
	}
	
	public static Map getActivityRoleTimeMap(NodeList activityRoleTimeProperties)
	{
		def activityRoleTime = [:]
		
		for(int k=0; k < activityRoleTimeProperties.getLength(); k++)
		{
			Node prop = activityRoleTimeProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				if(prop.getNodeName() == "role")
				{
					NodeList deliveryRoleProperties = prop.getChildNodes()
					activityRoleTime['role'] = getDeliveryRoleMap(deliveryRoleProperties)	
				}
				else
				{
					String checkedAttr = getActivityRoleTimeAttributes(prop.getNodeName().toString())
					if(checkedAttr != "")
					{
						activityRoleTime[checkedAttr] = prop.getTextContent()
					}
				}
			}
		}
	
		return activityRoleTime
	}
	
	public static List getProductRequired(Node productRequiredNode)
	{
		def productRequired = []
		NodeList serviceProductItemList = productRequiredNode.getChildNodes()
		
		for (int temp = 0; temp < serviceProductItemList.getLength(); temp++)
		{
			Node serviceProductItem = serviceProductItemList.item(temp)
			if (serviceProductItem.getNodeType() == Node.ELEMENT_NODE)
			{
				NodeList serviceProductItemProperties = serviceProductItem.getChildNodes()
				
				productRequired.add(getServiceProductItemMap(serviceProductItemProperties))
			}
		}
		
		return productRequired
	}
	
	public static Map getServiceProductItemMap(NodeList serviceProductItemProperties)
	{
		def serviceProductItem = [:]
		
		for(int k=0; k < serviceProductItemProperties.getLength(); k++)
		{
			Node prop = serviceProductItemProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				if(prop.getNodeName() == "product")
				{
					NodeList productProperties = prop.getChildNodes()
					serviceProductItem['product'] = getProductMap(productProperties)
				}
				else
				{
					String checkedAttr = getServiceProductItemAttributes(prop.getNodeName().toString())
					if(checkedAttr != "")
					{
						serviceProductItem[checkedAttr] = prop.getTextContent()
					}
				}
			}
		}
	
		return serviceProductItem
	}
	
	public static Map getProductMap(NodeList productProperties)
	{
		def product = [:]
		
		for(int k=0; k < productProperties.getLength(); k++)
		{
			Node prop = productProperties.item(k)
			if(prop.getNodeType() == Node.ELEMENT_NODE)
			{
				String checkedAttr = getProductAttributes(prop.getNodeName().toString())
				if(checkedAttr != "")
				{
					product[checkedAttr] = prop.getTextContent()
				}
			}
		}
	
		return product
	}
	
	public static def getSOWDefinitionAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "PART": 			return "part"
										break;
			case "NAME": 			return "name"
										break;
			case "VALUE": 			return "value"
										break;
			case "GEONAME": 		return "geoName"
										break;
			case "GEO_NAME": 		return "geoName"
										break;
			case "GEOCURRENCY": 	return "geoCurrency"
										break;
			case "GEO_CURRENCY": 	return "geoCurrency"
										break;
			default : 				return attrName
										break;
		}	
	}
	
	public static def getServiceProfileMetaphorsAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "SEQUENCEORDER": 	return "sequenceOrder"
										break;
			case "SEQUENCE_ORDER": 	return "sequenceOrder"
										break;
			case "NAME": 			return "name"
										break;
			case "VALUE": 			return "value"
										break;
			case "TYPE": 			return "type"
										break;
			default : 				return attrName
										break;
		}
	}
	
	public static def getServiceAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "SERVICENAME": 	return "serviceName"
										break;
			case "SERVICE_NAME": 	return "serviceName"
										break;
			case "SKUNAME": 		return "skuName"
										break;
			case "SKU_NAME": 		return "skuName"
										break;
			case "DESCRIPTION": 	return "description"
										break;
			case "TAGS": 			return "tags"
										break;
			
			default :				return attrName
										break
		}
	}
	
	public static def getPortfolioAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "PORTFOLIONAME": 	return "portfolioName"
										break;
			case "PORTFOLIO_NAME": 	return "portfolioName"
										break;
			case "DESCRIPTION": 	return "description"
										break;
			
			default :				return attrName
										break
		}
	}
	
	public static def getServiceProfileExtraUnitAttributes(String attr)
	{
		def attrName = ""
		
		switch(attr.toString().toUpperCase())
		{
			case "UNITOFSALE": 	return "unitOfSale"
									break;
			case "EXTRAUNIT": 	return "extraUnit"
									break;
			case "SHORTNAME":	return "shortName"
									break;
			default: 			return attrName
									break
		}
	}
	
	public static def getServiceProfileAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "REVISION": 								return "revision"
																break;
			case "VERSIONSTRING": 							return "versionString"
																break;
			case "VERSION_STRING": 							return "versionString"
																break;
			case "UNITOFSALE": 								return "unitOfSale"
																break;
			case "UNIT_OF_SALE": 							return "unitOfSale"
																break;
			case "BASEUNIT": 								return "baseUnits"
																break;
			case "BASE_UNIT": 								return "baseUnits"
																break;
			case "TOTALESTIMATEINHOURSPERBASEUNITS": 		return "totalEstimateInHoursPerBaseUnits"
																break;
			case "TOTAL_ESTIMATE_IN_HOURS_PER_BASE_UNITS": 	return "totalEstimateInHoursPerBaseUnits"
																break;
			case "TOTALESTIMATEINHOURSFLAT": 				return "totalEstimateInHoursFlat"
																break;
			case "TOTAL_ESTIMATE_IN_HOURS_FLAT": 			return "totalEstimateInHoursFlat"
																break;
			case "DEFINITION": 								return "definition"
																break;
										
			default :				return attrName
										break
		}
	}
	
	public static def getServiceDeliverableAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "NAME": 						return "name"
													break;
			case "SERVICEDELIVERABLENAME": 		return "name"
													break;
			case "SERVICE_DELIVERABLE_NAME": 	return "name"
													break;
			case "DELIVERABLENAME": 			return "name"
													break;
			case "DELIVERABLE_NAME": 			return "name"
													break;
			case "TYPE": 						return "type"
													break;
			case "DESCRIPTION": 				return "description"
													break;
			case "PHASE": 						return "phase"
													break;
			
			default :							return attrName
													break
		}
	}
	
	public static def getServiceActivityAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "NAME": 										return "name"
																	break;
			case "SERVICEACTIVITYNAME": 						return "name"
																	break;
			case "SERVICE_ACTIVITY_NAME": 						return "name"
																	break;
			case "ACTIVITYNAME": 								return "name"
																	break;
			case "ACTIVITY_NAME": 								return "name"
																	break;
			case "CATEGORY": 									return "category"
																	break;
			case "ESTIMATEDTIMEINHOURSPERBASEUNITS": 			return "estimatedTimeInHoursPerBaseUnits"
																	break;
			case "ESTIMATED_TIME_IN_HOURS_PER_BASE_UNITS": 		return "estimatedTimeInHoursPerBaseUnits"
																	break;
			case "ESTIMATEDTIMEINHOURSFLAT": 					return "estimatedTimeInHoursFlat"
																	break;
			case "ESTIMATED_TIME_IN_HOURS_FLAT": 				return "estimatedTimeInHoursFlat"
																	break;
			case "RESULTS": 									return "results"
																	break;
			case "DESCRIPTION": 								return "description"
																	break;
			
			default :											return attrName
																	break
		}
	}
	
	public static def getDeliveryRoleAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "NAME": 				return "name"
											break;
			case "DELIVERY_ROLE_NAME": 	return "name"
											break;
			case "DESCRIPTION": 		return "description"
											break;
			
			default :					return attrName
											break
		}
	}
	
	public static def getActivityRoleTimeAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "ROLE": 										return "role"
																	break;
			case "ESTIMATEDTIMEINHOURSPERBASEUNITS": 			return "estimatedTimeInHoursPerBaseUnits"
																	break;
			case "ESTIMATED_TIME_IN_HOURS_PER_BASE_UNITS": 		return "estimatedTimeInHoursPerBaseUnits"
																	break;
			case "ESTIMATEDTIMEINHOURSFLAT": 					return "estimatedTimeInHoursFlat"
																	break;
			case "ESTIMATED_TIME_IN_HOURS_FLAT": 				return "estimatedTimeInHoursFlat"
																	break;
			default :											return attrName
																	break
		}
	}
	
	public static def getServiceProductItemAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "UNITSSOLDPERBASEUNITS": 					return "unitsSoldPerBaseUnits"
																	break;
			case "UNITS_SOLD_PER_BASE_UNITS": 				return "unitsSoldPerBaseUnits"
																	break;
			case "UNITSSOLDRATEPERADDITIONALUNIT": 			return "unitsSoldRatePerAdditionalUnit"
																	break;
			case "UNITS_SOLD_RATE_PER_ADDITIONAL_UNIT": 	return "unitsSoldRatePerAdditionalUnit"
																	break;
			default :										return attrName
																	break
		}
	}
	
	public static def getProductAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "PRODUCTID": 		return "product_id"
										break;
			case "PRODUCT_ID": 		return "product_id"
										break;
			case "UNITOFSALE": 		return "unitOfSale"
										break;
			case "UNIT_OF_SALE": 	return "unitOfSale"
										break;
			case "PRODUCTNAME": 	return "productName"
										break;
			case "PRODUCT_NAME": 	return "productName"
										break;
			case "PRODUCTTYPE": 	return "productType"
										break;
			case "PRODUCT_TYPE": 	return "productType"
										break;
			default :				return attrName
										break
		}
	}
	
	public static String getDescriptionAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "NAME": 		return "name"
										break;
			case "VALUE": 		return "value"
										break;
			default :			return attrName
										break
		}
	}
	
	public static String getServiceActivityTaskAttributes(String attr)
	{
		def attrName = ""
		switch(attr.toString().toUpperCase())
		{
			case "TASK": 			return "task"
										break;
			case "SEQUENCEORDER": 	return "sequenceOrder"
										break;
			default :				return attrName
										break
		}
	}
}
